<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!-- 启用shrio授权注解拦截方式 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!-- 装配 securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆页面 -->
        <!--<property name="loginUrl" value="/login.html"/>-->
        <property name="loginUrl" value="/login"/>

        <!-- 登陆成功后的一面 -->
        <property name="successUrl" value="/"/>

        <property name="unauthorizedUrl" value="/login"/>

        <property name="filters">
           <map>
               <entry key="noSessionReadFilter" value-ref="noSessionReadFilter" />
           </map>
        </property>

        <!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.
          /index.jsp=anon
                /jsp/success.jsp=anon
                /jsp/fail.jsp=anon
                /jsp/user.jsp = roles[user]
                /jsp/home.jsp = roles[admin]
                /logout = logout
          -->
        <property name="filterChainDefinitions">
            <!--除了登录页面 其他的都需要 用户校验 -->
            <!--
            authc filter 必须要通过身份认证,
            user filter 是通过身份认真或者rememberMe都可以

            authc , user 应用场景就不一直了 在某些特殊要求的操作一定需要 身份认证的 就不能用 user
            -->

            <value>
                /favicon.ico=anon
                /statics/**=anon
                /login=authc
                /logout=logout
                /**=user
            </value>
        </property>
    </bean>

    <bean id="noSessionReadFilter" class="com.mine.shiro.filter.NoSessionReadFilter" />

    <!-- 会话Cookie模板 -->
    <!-- sessionId cookie 关闭浏览器 过期-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>


    <!--rememberMe cookie 30天过期-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!--加密key-->
        <!--<property name="cipherKey" value="-->
<!--#{T(org.apache.shiro.codec.Base64).decode('bWluZS1jbXMAAAAAAAAAAABBBBBB==')}"/>-->

        <property name="cookie" ref="rememberMeCookie"/>
    </bean>


    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 指定 ehcache 的配置文件 -->
        <property name="cacheManagerConfigFile" value="classpath:spring/ehcache-shiro.xml"/>
    </bean>

    <bean id="mySessionListener" class="com.mine.shiro.session.listener.MySessionListener" />

    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" >
        <!--对应ehCache name="shiro-activeSessionCache"-->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache" />

        <!-- sessionId 生成器 -->
        <property name="sessionIdGenerator" >
            <bean class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
        </property>

    </bean>

    <!--mysql session 存储的实现-->
    <bean id="mySqlSessionDAO" class="com.mine.shiro.session.dao.MySqlSessionDao" lazy-init="false">
        <!--对应ehCache name="shiro-activeSessionCache"-->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache" />

        <!-- sessionId 生成器 -->
        <property name="sessionIdGenerator" >
            <bean class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
        </property>

        <property name="excludeUrls">
            <list>
                <value>.*\.js</value>
                <value>.*\.css</value>
                <value>.*\.jpg</value>
                <value>.*\.png</value>
                <value>.*\.gif</value>
                <value>.*\.jpeg</value>
                <value>.*\.jpe</value>
                <value>.*\.jfif</value>
                <value>.*\.bmp</value>
                <value>.*\.tif</value>
            </list>
        </property>
    </bean>

    <!-- msyql 版本 为处理 session 过期的事 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" lazy-init="false">
        <property name="sessionIdCookie" ref="sessionIdCookie" />
        <property name="sessionIdCookieEnabled" value="true" />
        <property name="sessionListeners">
            <list>
                <ref bean="mySessionListener" />
            </list>
        </property>
        <property name="sessionDAO" ref="mySqlSessionDAO"/>
    </bean>

    <bean id="memcachedSessionDao" class="com.mine.shiro.session.dao.MemcachedSessionDao" >
        <property name="excludeUrls">
            <list>
                <value>.*\.js</value>
                <value>.*\.css</value>
                <value>.*\.jpg</value>
                <value>.*\.png</value>
                <value>.*\.gif</value>
                <value>.*\.jpeg</value>
                <value>.*\.jpe</value>
                <value>.*\.jfif</value>
                <value>.*\.bmp</value>
                <value>.*\.tif</value>
            </list>
        </property>
    </bean>

    <bean id="mcSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdCookie" ref="sessionIdCookie" />
        <property name="sessionIdCookieEnabled" value="true" />
        <!--关闭 session 清理-->
        <property name="sessionValidationSchedulerEnabled" value="false" />
        <property name="sessionListeners">
            <list>
                <ref bean="mySessionListener" />
            </list>
        </property>
        <property name="sessionDAO" ref="memcachedSessionDao"/>
    </bean>

    <bean id="mcCustomSessionManager" class="com.mine.shiro.session.manager.CustomWebSessionManager" lazy-init="false">
        <property name="sessionIdCookie" ref="sessionIdCookie" />
        <property name="sessionIdCookieEnabled" value="true" />
        <!--关闭 session 清理-->
        <property name="sessionValidationSchedulerEnabled" value="false" />
        <property name="sessionListeners">
            <list>
                <ref bean="mySessionListener" />
            </list>
        </property>
        <property name="sessionDAO" ref="memcachedSessionDao"/>
        <!--不读取session的url-->
        <property name="excludeNoReadSessionPaths">
            <set>
                <value>/statics/**</value>
            </set>
        </property>
    </bean>


    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--<constructor-arg ref="cacheManager"/>-->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="5"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!--
     配置进行授权和认证的 Realm
     Realm 继承 AuthorizingRealm
     AuthorizingRealm 柔和了 相关缓存的功能
    -->
    <bean id="myRealm" class="com.mine.shiro.ShiroDBRealm">
        <!--<property name="systemUserService" ref="systemUserService"></property>-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!--是否开启缓存-->
        <property name="cachingEnabled" value="true"/>
        <!--身份验证缓存是否开启-->
        <property name="authenticationCachingEnabled" value="true"/>
        <!--缓存对应的 名称  key, value(ConcurrentHashMap)-->
        <!--value="authenticationCache" 与 ehCache 应该一致-->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!--权限验证缓存是否开启-->
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>

    </bean>

    <!-- 配置 Shiro 的 SecurityManager Bean. -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

        <property name="realms">
            <list>
                <ref bean="myRealm" />
            </list>
        </property>

        <!--
            加入缓存机制
            如果应用 memcached 就不用 cacheManager
        -->
        <!--<property name="cacheManager" ref="cacheManager"/>-->

        <!--<property name="sessionManager" ref="sessionManager" />-->
        <property name="sessionManager" ref="mcCustomSessionManager" />

        <property name="rememberMeManager" ref="rememberMeManager" />

    </bean>


    <!--authc filter 设置 rememberParam 名称 如果保持 默认的 可以不设置-->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>


    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


    <!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>